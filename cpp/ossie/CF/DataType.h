// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __DataType_hh__
#define __DataType_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_DataType
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_DataType
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataType
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

  struct DataType {
    typedef _CORBA_ConstrType_Variable_Var<DataType> _var_type;

    
    ::CORBA::String_member id;

    ::CORBA::Any value;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef DataType::_var_type DataType_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< DataType,DataType_var > DataType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DataType;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Properties;

  class Properties_var;

  class Properties : public _CORBA_Unbounded_Sequence< DataType >  {
  public:
    typedef Properties_var _var_type;
    inline Properties() {}
    inline Properties(const Properties& _s)
      : _CORBA_Unbounded_Sequence< DataType > (_s) {}

    inline Properties(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< DataType > (_max) {}
    inline Properties(_CORBA_ULong _max, _CORBA_ULong _len, DataType* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< DataType > (_max, _len, _val, _rel) {}

  

    inline Properties& operator = (const Properties& _s) {
      _CORBA_Unbounded_Sequence< DataType > ::operator=(_s);
      return *this;
    }
  };

  class Properties_out;

  class Properties_var {
  public:
    inline Properties_var() : _pd_seq(0) {}
    inline Properties_var(Properties* _s) : _pd_seq(_s) {}
    inline Properties_var(const Properties_var& _s) {
      if (_s._pd_seq)  _pd_seq = new Properties(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~Properties_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline Properties_var& operator = (Properties* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Properties_var& operator = (const Properties_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new Properties;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline DataType& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Properties* operator -> () { return _pd_seq; }
    inline const Properties* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Properties& () const { return *_pd_seq; }
#else
    inline operator const Properties& () const { return *_pd_seq; }
    inline operator Properties& () { return *_pd_seq; }
#endif
      
    inline const Properties& in() const { return *_pd_seq; }
    inline Properties&       inout()    { return *_pd_seq; }
    inline Properties*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Properties* _retn() { Properties* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Properties_out;
    
  private:
    Properties* _pd_seq;
  };

  class Properties_out {
  public:
    inline Properties_out(Properties*& _s) : _data(_s) { _data = 0; }
    inline Properties_out(Properties_var& _s)
      : _data(_s._pd_seq) { _s = (Properties*) 0; }
    inline Properties_out(const Properties_out& _s) : _data(_s._data) {}
    inline Properties_out& operator = (const Properties_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Properties_out& operator = (Properties* _s) {
      _data = _s;
      return *this;
    }
    inline operator Properties*&()  { return _data; }
    inline Properties*& ptr()       { return _data; }
    inline Properties* operator->() { return _data; }

    inline DataType& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Properties*& _data;

  private:
    Properties_out();
    Properties_out& operator=(const Properties_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OctetSequence;

  class OctetSequence_var;

  class OctetSequence : public _CORBA_Unbounded_Sequence_Octet {
  public:
    typedef OctetSequence_var _var_type;
    inline OctetSequence() {}
    inline OctetSequence(const OctetSequence& _s)
      : _CORBA_Unbounded_Sequence_Octet(_s) {}

    inline OctetSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Octet(_max) {}
    inline OctetSequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Octet* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Octet(_max, _len, _val, _rel) {}

  

    inline OctetSequence& operator = (const OctetSequence& _s) {
      _CORBA_Unbounded_Sequence_Octet::operator=(_s);
      return *this;
    }
  };

  class OctetSequence_out;

  class OctetSequence_var {
  public:
    inline OctetSequence_var() : _pd_seq(0) {}
    inline OctetSequence_var(OctetSequence* _s) : _pd_seq(_s) {}
    inline OctetSequence_var(const OctetSequence_var& _s) {
      if (_s._pd_seq)  _pd_seq = new OctetSequence(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~OctetSequence_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline OctetSequence_var& operator = (OctetSequence* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline OctetSequence_var& operator = (const OctetSequence_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new OctetSequence;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline ::CORBA::Octet& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline OctetSequence* operator -> () { return _pd_seq; }
    inline const OctetSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator OctetSequence& () const { return *_pd_seq; }
#else
    inline operator const OctetSequence& () const { return *_pd_seq; }
    inline operator OctetSequence& () { return *_pd_seq; }
#endif
      
    inline const OctetSequence& in() const { return *_pd_seq; }
    inline OctetSequence&       inout()    { return *_pd_seq; }
    inline OctetSequence*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline OctetSequence* _retn() { OctetSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class OctetSequence_out;
    
  private:
    OctetSequence* _pd_seq;
  };

  class OctetSequence_out {
  public:
    inline OctetSequence_out(OctetSequence*& _s) : _data(_s) { _data = 0; }
    inline OctetSequence_out(OctetSequence_var& _s)
      : _data(_s._pd_seq) { _s = (OctetSequence*) 0; }
    inline OctetSequence_out(const OctetSequence_out& _s) : _data(_s._data) {}
    inline OctetSequence_out& operator = (const OctetSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline OctetSequence_out& operator = (OctetSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator OctetSequence*&()  { return _data; }
    inline OctetSequence*& ptr()       { return _data; }
    inline OctetSequence* operator->() { return _data; }

    inline ::CORBA::Octet& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    OctetSequence*& _data;

  private:
    OctetSequence_out();
    OctetSequence_out& operator=(const OctetSequence_var&);
  };

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_StringSequence;

  class StringSequence_var;

  class StringSequence : public _CORBA_Unbounded_Sequence_String {
  public:
    typedef StringSequence_var _var_type;
    inline StringSequence() {}
    inline StringSequence(const StringSequence& _s)
      : _CORBA_Unbounded_Sequence_String(_s) {}

    inline StringSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_String(_max) {}
    inline StringSequence(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

  

    inline StringSequence& operator = (const StringSequence& _s) {
      _CORBA_Unbounded_Sequence_String::operator=(_s);
      return *this;
    }
  };

  class StringSequence_out;

  class StringSequence_var {
  public:
    inline StringSequence_var() : _pd_seq(0) {}
    inline StringSequence_var(StringSequence* _s) : _pd_seq(_s) {}
    inline StringSequence_var(const StringSequence_var& _s) {
      if (_s._pd_seq)  _pd_seq = new StringSequence(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~StringSequence_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline StringSequence_var& operator = (StringSequence* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline StringSequence_var& operator = (const StringSequence_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new StringSequence;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline StringSequence* operator -> () { return _pd_seq; }
    inline const StringSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator StringSequence& () const { return *_pd_seq; }
#else
    inline operator const StringSequence& () const { return *_pd_seq; }
    inline operator StringSequence& () { return *_pd_seq; }
#endif
      
    inline const StringSequence& in() const { return *_pd_seq; }
    inline StringSequence&       inout()    { return *_pd_seq; }
    inline StringSequence*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline StringSequence* _retn() { StringSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class StringSequence_out;
    
  private:
    StringSequence* _pd_seq;
  };

  class StringSequence_out {
  public:
    inline StringSequence_out(StringSequence*& _s) : _data(_s) { _data = 0; }
    inline StringSequence_out(StringSequence_var& _s)
      : _data(_s._pd_seq) { _s = (StringSequence*) 0; }
    inline StringSequence_out(const StringSequence_out& _s) : _data(_s._data) {}
    inline StringSequence_out& operator = (const StringSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline StringSequence_out& operator = (StringSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator StringSequence*&()  { return _data; }
    inline StringSequence*& ptr()       { return _data; }
    inline StringSequence* operator->() { return _data; }

    inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    StringSequence*& _data;

  private:
    StringSequence_out();
    StringSequence_out& operator=(const StringSequence_var&);
  };

  struct UTCTime {
    typedef _CORBA_ConstrType_Fix_Var<UTCTime> _var_type;

    
    ::CORBA::Short tcstatus;

    ::CORBA::Double twsec;

    ::CORBA::Double tfsec;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef UTCTime::_var_type UTCTime_var;

  typedef UTCTime& UTCTime_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UTCTime;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UTCTimeSequence;

  class UTCTimeSequence_var;

  class UTCTimeSequence : public _CORBA_Unbounded_Sequence< UTCTime >  {
  public:
    typedef UTCTimeSequence_var _var_type;
    inline UTCTimeSequence() {}
    inline UTCTimeSequence(const UTCTimeSequence& _s)
      : _CORBA_Unbounded_Sequence< UTCTime > (_s) {}

    inline UTCTimeSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< UTCTime > (_max) {}
    inline UTCTimeSequence(_CORBA_ULong _max, _CORBA_ULong _len, UTCTime* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< UTCTime > (_max, _len, _val, _rel) {}

  

    inline UTCTimeSequence& operator = (const UTCTimeSequence& _s) {
      _CORBA_Unbounded_Sequence< UTCTime > ::operator=(_s);
      return *this;
    }
  };

  class UTCTimeSequence_out;

  class UTCTimeSequence_var {
  public:
    inline UTCTimeSequence_var() : _pd_seq(0) {}
    inline UTCTimeSequence_var(UTCTimeSequence* _s) : _pd_seq(_s) {}
    inline UTCTimeSequence_var(const UTCTimeSequence_var& _s) {
      if (_s._pd_seq)  _pd_seq = new UTCTimeSequence(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~UTCTimeSequence_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline UTCTimeSequence_var& operator = (UTCTimeSequence* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline UTCTimeSequence_var& operator = (const UTCTimeSequence_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new UTCTimeSequence;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline UTCTime& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline UTCTimeSequence* operator -> () { return _pd_seq; }
    inline const UTCTimeSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator UTCTimeSequence& () const { return *_pd_seq; }
#else
    inline operator const UTCTimeSequence& () const { return *_pd_seq; }
    inline operator UTCTimeSequence& () { return *_pd_seq; }
#endif
      
    inline const UTCTimeSequence& in() const { return *_pd_seq; }
    inline UTCTimeSequence&       inout()    { return *_pd_seq; }
    inline UTCTimeSequence*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline UTCTimeSequence* _retn() { UTCTimeSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class UTCTimeSequence_out;
    
  private:
    UTCTimeSequence* _pd_seq;
  };

  class UTCTimeSequence_out {
  public:
    inline UTCTimeSequence_out(UTCTimeSequence*& _s) : _data(_s) { _data = 0; }
    inline UTCTimeSequence_out(UTCTimeSequence_var& _s)
      : _data(_s._pd_seq) { _s = (UTCTimeSequence*) 0; }
    inline UTCTimeSequence_out(const UTCTimeSequence_out& _s) : _data(_s._data) {}
    inline UTCTimeSequence_out& operator = (const UTCTimeSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline UTCTimeSequence_out& operator = (UTCTimeSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator UTCTimeSequence*&()  { return _data; }
    inline UTCTimeSequence*& ptr()       { return _data; }
    inline UTCTimeSequence* operator->() { return _data; }

    inline UTCTime& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    UTCTimeSequence*& _data;

  private:
    UTCTimeSequence_out();
    UTCTimeSequence_out& operator=(const UTCTimeSequence_var&);
  };

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const CF::DataType& _s);
extern void operator<<=(::CORBA::Any& _a, CF::DataType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::DataType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::DataType*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::Properties& _s);
void operator<<=(::CORBA::Any& _a, CF::Properties* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::Properties*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::Properties*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::OctetSequence& _s);
void operator<<=(::CORBA::Any& _a, CF::OctetSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::OctetSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::OctetSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::StringSequence& _s);
void operator<<=(::CORBA::Any& _a, CF::StringSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::StringSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::StringSequence*& _sp);

extern void operator<<=(::CORBA::Any& _a, const CF::UTCTime& _s);
extern void operator<<=(::CORBA::Any& _a, CF::UTCTime* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::UTCTime*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::UTCTime*& _sp);

void operator<<=(::CORBA::Any& _a, const CF::UTCTimeSequence& _s);
void operator<<=(::CORBA::Any& _a, CF::UTCTimeSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::UTCTimeSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const CF::UTCTimeSequence*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_DataType
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_DataType
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_DataType
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_DataType
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataType
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataType
#endif

#endif  // __DataType_hh__


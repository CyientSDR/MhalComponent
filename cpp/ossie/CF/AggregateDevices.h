// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __AggregateDevices_hh__
#define __AggregateDevices_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
#endif



#ifndef __CosNaming_hh_EXTERNAL_GUARD__
#define __CosNaming_hh_EXTERNAL_GUARD__
#include <COS/CosNaming.hh>
#endif
#ifndef __DataType_hh_EXTERNAL_GUARD__
#define __DataType_hh_EXTERNAL_GUARD__
#include <ossie/CF/DataType.h>
#endif
#ifndef __Port_hh_EXTERNAL_GUARD__
#define __Port_hh_EXTERNAL_GUARD__
#include <ossie/CF/Port.h>
#endif
#ifndef __LogInterfaces_hh_EXTERNAL_GUARD__
#define __LogInterfaces_hh_EXTERNAL_GUARD__
#include <ossie/CF/LogInterfaces.h>
#endif
#ifndef __CosEventComm_hh_EXTERNAL_GUARD__
#define __CosEventComm_hh_EXTERNAL_GUARD__
#include <COS/CosEventComm.hh>
#endif
#ifndef __CosEventChannelAdmin_hh_EXTERNAL_GUARD__
#define __CosEventChannelAdmin_hh_EXTERNAL_GUARD__
#include <COS/CosEventChannelAdmin.hh>
#endif
#ifndef __EventChannelManager_hh_EXTERNAL_GUARD__
#define __EventChannelManager_hh_EXTERNAL_GUARD__
#include <ossie/CF/EventChannelManager.h>
#endif
#ifndef __cf_hh_EXTERNAL_GUARD__
#define __cf_hh_EXTERNAL_GUARD__
#include <ossie/CF/cf.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE CF

_CORBA_MODULE_BEG

#ifndef __CF_mAggregatePlainDevice__
#define __CF_mAggregatePlainDevice__
  class AggregatePlainDevice;
  class _objref_AggregatePlainDevice;
  class _impl_AggregatePlainDevice;
  
  typedef _objref_AggregatePlainDevice* AggregatePlainDevice_ptr;
  typedef AggregatePlainDevice_ptr AggregatePlainDeviceRef;

  class AggregatePlainDevice_Helper {
  public:
    typedef AggregatePlainDevice_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_AggregatePlainDevice, AggregatePlainDevice_Helper> AggregatePlainDevice_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_AggregatePlainDevice,AggregatePlainDevice_Helper > AggregatePlainDevice_out;

#endif

  // interface AggregatePlainDevice
  class AggregatePlainDevice {
  public:
    // Declarations for this interface type.
    typedef AggregatePlainDevice_ptr _ptr_type;
    typedef AggregatePlainDevice_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_AggregatePlainDevice :
    public virtual _objref_Device,
    public virtual _objref_AggregateDevice
  {
  public:
    // IDL operations
    

    // Constructors
    inline _objref_AggregatePlainDevice()  { _PR_setobj(0); }  // nil
    _objref_AggregatePlainDevice(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_AggregatePlainDevice();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_AggregatePlainDevice(const _objref_AggregatePlainDevice&);
    _objref_AggregatePlainDevice& operator = (const _objref_AggregatePlainDevice&);
    // not implemented

    friend class AggregatePlainDevice;
  };

  class _pof_AggregatePlainDevice : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_AggregatePlainDevice() : _OMNI_NS(proxyObjectFactory)(AggregatePlainDevice::_PD_repoId) {}
    virtual ~_pof_AggregatePlainDevice();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_AggregatePlainDevice :
    public virtual _impl_Device,
    public virtual _impl_AggregateDevice
  {
  public:
    virtual ~_impl_AggregatePlainDevice();

    
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AggregatePlainDevice;

#ifndef __CF_mAggregateLoadableDevice__
#define __CF_mAggregateLoadableDevice__
  class AggregateLoadableDevice;
  class _objref_AggregateLoadableDevice;
  class _impl_AggregateLoadableDevice;
  
  typedef _objref_AggregateLoadableDevice* AggregateLoadableDevice_ptr;
  typedef AggregateLoadableDevice_ptr AggregateLoadableDeviceRef;

  class AggregateLoadableDevice_Helper {
  public:
    typedef AggregateLoadableDevice_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_AggregateLoadableDevice, AggregateLoadableDevice_Helper> AggregateLoadableDevice_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_AggregateLoadableDevice,AggregateLoadableDevice_Helper > AggregateLoadableDevice_out;

#endif

  // interface AggregateLoadableDevice
  class AggregateLoadableDevice {
  public:
    // Declarations for this interface type.
    typedef AggregateLoadableDevice_ptr _ptr_type;
    typedef AggregateLoadableDevice_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_AggregateLoadableDevice :
    public virtual _objref_LoadableDevice,
    public virtual _objref_AggregateDevice
  {
  public:
    // IDL operations
    

    // Constructors
    inline _objref_AggregateLoadableDevice()  { _PR_setobj(0); }  // nil
    _objref_AggregateLoadableDevice(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_AggregateLoadableDevice();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_AggregateLoadableDevice(const _objref_AggregateLoadableDevice&);
    _objref_AggregateLoadableDevice& operator = (const _objref_AggregateLoadableDevice&);
    // not implemented

    friend class AggregateLoadableDevice;
  };

  class _pof_AggregateLoadableDevice : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_AggregateLoadableDevice() : _OMNI_NS(proxyObjectFactory)(AggregateLoadableDevice::_PD_repoId) {}
    virtual ~_pof_AggregateLoadableDevice();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_AggregateLoadableDevice :
    public virtual _impl_LoadableDevice,
    public virtual _impl_AggregateDevice
  {
  public:
    virtual ~_impl_AggregateLoadableDevice();

    
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AggregateLoadableDevice;

#ifndef __CF_mAggregateExecutableDevice__
#define __CF_mAggregateExecutableDevice__
  class AggregateExecutableDevice;
  class _objref_AggregateExecutableDevice;
  class _impl_AggregateExecutableDevice;
  
  typedef _objref_AggregateExecutableDevice* AggregateExecutableDevice_ptr;
  typedef AggregateExecutableDevice_ptr AggregateExecutableDeviceRef;

  class AggregateExecutableDevice_Helper {
  public:
    typedef AggregateExecutableDevice_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_AggregateExecutableDevice, AggregateExecutableDevice_Helper> AggregateExecutableDevice_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_AggregateExecutableDevice,AggregateExecutableDevice_Helper > AggregateExecutableDevice_out;

#endif

  // interface AggregateExecutableDevice
  class AggregateExecutableDevice {
  public:
    // Declarations for this interface type.
    typedef AggregateExecutableDevice_ptr _ptr_type;
    typedef AggregateExecutableDevice_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_AggregateExecutableDevice :
    public virtual _objref_ExecutableDevice,
    public virtual _objref_AggregateDevice
  {
  public:
    // IDL operations
    

    // Constructors
    inline _objref_AggregateExecutableDevice()  { _PR_setobj(0); }  // nil
    _objref_AggregateExecutableDevice(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_AggregateExecutableDevice();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_AggregateExecutableDevice(const _objref_AggregateExecutableDevice&);
    _objref_AggregateExecutableDevice& operator = (const _objref_AggregateExecutableDevice&);
    // not implemented

    friend class AggregateExecutableDevice;
  };

  class _pof_AggregateExecutableDevice : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_AggregateExecutableDevice() : _OMNI_NS(proxyObjectFactory)(AggregateExecutableDevice::_PD_repoId) {}
    virtual ~_pof_AggregateExecutableDevice();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_AggregateExecutableDevice :
    public virtual _impl_ExecutableDevice,
    public virtual _impl_AggregateDevice
  {
  public:
    virtual ~_impl_AggregateExecutableDevice();

    
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AggregateExecutableDevice;

_CORBA_MODULE_END



_CORBA_MODULE POA_CF
_CORBA_MODULE_BEG

  class AggregatePlainDevice :
    public virtual CF::_impl_AggregatePlainDevice,
    public virtual Device,
      public virtual AggregateDevice
  {
  public:
    virtual ~AggregatePlainDevice();

    inline ::CF::AggregatePlainDevice_ptr _this() {
      return (::CF::AggregatePlainDevice_ptr) _do_this(::CF::AggregatePlainDevice::_PD_repoId);
    }
  };

  class AggregateLoadableDevice :
    public virtual CF::_impl_AggregateLoadableDevice,
    public virtual LoadableDevice,
      public virtual AggregateDevice
  {
  public:
    virtual ~AggregateLoadableDevice();

    inline ::CF::AggregateLoadableDevice_ptr _this() {
      return (::CF::AggregateLoadableDevice_ptr) _do_this(::CF::AggregateLoadableDevice::_PD_repoId);
    }
  };

  class AggregateExecutableDevice :
    public virtual CF::_impl_AggregateExecutableDevice,
    public virtual ExecutableDevice,
      public virtual AggregateDevice
  {
  public:
    virtual ~AggregateExecutableDevice();

    inline ::CF::AggregateExecutableDevice_ptr _this() {
      return (::CF::AggregateExecutableDevice_ptr) _do_this(::CF::AggregateExecutableDevice::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_CF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

void operator<<=(::CORBA::Any& _a, CF::AggregatePlainDevice_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::AggregatePlainDevice_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::AggregatePlainDevice_ptr& _s);

void operator<<=(::CORBA::Any& _a, CF::AggregateLoadableDevice_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::AggregateLoadableDevice_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::AggregateLoadableDevice_ptr& _s);

void operator<<=(::CORBA::Any& _a, CF::AggregateExecutableDevice_ptr _s);
void operator<<=(::CORBA::Any& _a, CF::AggregateExecutableDevice_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, CF::AggregateExecutableDevice_ptr& _s);



inline void
CF::AggregatePlainDevice::_marshalObjRef(::CF::AggregatePlainDevice_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
CF::AggregateLoadableDevice::_marshalObjRef(::CF::AggregateLoadableDevice_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}

inline void
CF::AggregateExecutableDevice::_marshalObjRef(::CF::AggregateExecutableDevice_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_AggregateDevices
#endif

#endif  // __AggregateDevices_hh__


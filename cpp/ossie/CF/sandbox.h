// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __sandbox_hh__
#define __sandbox_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_sandbox
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_sandbox
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_sandbox
#endif



#ifndef __DataType_hh_EXTERNAL_GUARD__
#define __DataType_hh_EXTERNAL_GUARD__
#include <ossie/CF/DataType.h>
#endif
#ifndef __CosNaming_hh_EXTERNAL_GUARD__
#define __CosNaming_hh_EXTERNAL_GUARD__
#include <COS/CosNaming.hh>
#endif
#ifndef __Port_hh_EXTERNAL_GUARD__
#define __Port_hh_EXTERNAL_GUARD__
#include <ossie/CF/Port.h>
#endif
#ifndef __LogInterfaces_hh_EXTERNAL_GUARD__
#define __LogInterfaces_hh_EXTERNAL_GUARD__
#include <ossie/CF/LogInterfaces.h>
#endif
#ifndef __CosEventComm_hh_EXTERNAL_GUARD__
#define __CosEventComm_hh_EXTERNAL_GUARD__
#include <COS/CosEventComm.hh>
#endif
#ifndef __CosEventChannelAdmin_hh_EXTERNAL_GUARD__
#define __CosEventChannelAdmin_hh_EXTERNAL_GUARD__
#include <COS/CosEventChannelAdmin.hh>
#endif
#ifndef __EventChannelManager_hh_EXTERNAL_GUARD__
#define __EventChannelManager_hh_EXTERNAL_GUARD__
#include <ossie/CF/EventChannelManager.h>
#endif
#ifndef __cf_hh_EXTERNAL_GUARD__
#define __cf_hh_EXTERNAL_GUARD__
#include <ossie/CF/cf.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE ExtendedCF

_CORBA_MODULE_BEG

  struct ResourceDesc {
    typedef _CORBA_ConstrType_Variable_Var<ResourceDesc> _var_type;

    
    _CORBA_ObjRef_Member< CF::_objref_Resource, CF::Resource_Helper>  resource;

    ::CORBA::String_member profile;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ResourceDesc::_var_type ResourceDesc_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ResourceDesc,ResourceDesc_var > ResourceDesc_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ResourceDesc;

#ifndef __ExtendedCF_mSandbox__
#define __ExtendedCF_mSandbox__
  class Sandbox;
  class _objref_Sandbox;
  class _impl_Sandbox;
  
  typedef _objref_Sandbox* Sandbox_ptr;
  typedef Sandbox_ptr SandboxRef;

  class Sandbox_Helper {
  public:
    typedef Sandbox_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_Sandbox, Sandbox_Helper> Sandbox_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_Sandbox,Sandbox_Helper > Sandbox_out;

#endif

  // interface Sandbox
  class Sandbox {
  public:
    // Declarations for this interface type.
    typedef Sandbox_ptr _ptr_type;
    typedef Sandbox_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    enum Depth { FULL, SELF /*, __max_Depth=0xffffffff */ };
    typedef Depth& Depth_out;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_Depth;

    static _core_attr const char * LAUNCH_TYPE;

    static _core_attr const char * LAUNCH_TYPE_DEBUG;

    static _core_attr const char * LAUNCH_TYPE_RUN;

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ResourceDescSequence;

    class ResourceDescSequence_var;

    class ResourceDescSequence : public _CORBA_Unbounded_Sequence< ResourceDesc >  {
    public:
      typedef ResourceDescSequence_var _var_type;
      inline ResourceDescSequence() {}
      inline ResourceDescSequence(const ResourceDescSequence& _s)
        : _CORBA_Unbounded_Sequence< ResourceDesc > (_s) {}

      inline ResourceDescSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< ResourceDesc > (_max) {}
      inline ResourceDescSequence(_CORBA_ULong _max, _CORBA_ULong _len, ResourceDesc* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< ResourceDesc > (_max, _len, _val, _rel) {}

    

      inline ResourceDescSequence& operator = (const ResourceDescSequence& _s) {
        _CORBA_Unbounded_Sequence< ResourceDesc > ::operator=(_s);
        return *this;
      }
    };

    class ResourceDescSequence_out;

    class ResourceDescSequence_var {
    public:
      inline ResourceDescSequence_var() : _pd_seq(0) {}
      inline ResourceDescSequence_var(ResourceDescSequence* _s) : _pd_seq(_s) {}
      inline ResourceDescSequence_var(const ResourceDescSequence_var& _s) {
        if (_s._pd_seq)  _pd_seq = new ResourceDescSequence(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~ResourceDescSequence_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline ResourceDescSequence_var& operator = (ResourceDescSequence* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ResourceDescSequence_var& operator = (const ResourceDescSequence_var& _s) {
        if (&_s != this) {
          if (_s._pd_seq) {
            if (!_pd_seq)  _pd_seq = new ResourceDescSequence;
            *_pd_seq = *_s._pd_seq;
          }
          else if (_pd_seq) {
            delete _pd_seq;
            _pd_seq = 0;
          }
        }
        return *this;
      }
      inline ResourceDesc& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ResourceDescSequence* operator -> () { return _pd_seq; }
      inline const ResourceDescSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ResourceDescSequence& () const { return *_pd_seq; }
#else
      inline operator const ResourceDescSequence& () const { return *_pd_seq; }
      inline operator ResourceDescSequence& () { return *_pd_seq; }
#endif
        
      inline const ResourceDescSequence& in() const { return *_pd_seq; }
      inline ResourceDescSequence&       inout()    { return *_pd_seq; }
      inline ResourceDescSequence*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ResourceDescSequence* _retn() { ResourceDescSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ResourceDescSequence_out;
      
    private:
      ResourceDescSequence* _pd_seq;
    };

    class ResourceDescSequence_out {
    public:
      inline ResourceDescSequence_out(ResourceDescSequence*& _s) : _data(_s) { _data = 0; }
      inline ResourceDescSequence_out(ResourceDescSequence_var& _s)
        : _data(_s._pd_seq) { _s = (ResourceDescSequence*) 0; }
      inline ResourceDescSequence_out(const ResourceDescSequence_out& _s) : _data(_s._data) {}
      inline ResourceDescSequence_out& operator = (const ResourceDescSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ResourceDescSequence_out& operator = (ResourceDescSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator ResourceDescSequence*&()  { return _data; }
      inline ResourceDescSequence*& ptr()       { return _data; }
      inline ResourceDescSequence* operator->() { return _data; }

      inline ResourceDesc& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ResourceDescSequence*& _data;

    private:
      ResourceDescSequence_out();
      ResourceDescSequence_out& operator=(const ResourceDescSequence_var&);
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ProfileDescSequence;

    class ProfileDescSequence_var;

    class ProfileDescSequence : public _CORBA_Unbounded_Sequence_String {
    public:
      typedef ProfileDescSequence_var _var_type;
      inline ProfileDescSequence() {}
      inline ProfileDescSequence(const ProfileDescSequence& _s)
        : _CORBA_Unbounded_Sequence_String(_s) {}

      inline ProfileDescSequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence_String(_max) {}
      inline ProfileDescSequence(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

    

      inline ProfileDescSequence& operator = (const ProfileDescSequence& _s) {
        _CORBA_Unbounded_Sequence_String::operator=(_s);
        return *this;
      }
    };

    class ProfileDescSequence_out;

    class ProfileDescSequence_var {
    public:
      inline ProfileDescSequence_var() : _pd_seq(0) {}
      inline ProfileDescSequence_var(ProfileDescSequence* _s) : _pd_seq(_s) {}
      inline ProfileDescSequence_var(const ProfileDescSequence_var& _s) {
        if (_s._pd_seq)  _pd_seq = new ProfileDescSequence(*_s._pd_seq);
        else             _pd_seq = 0;
      }
      inline ~ProfileDescSequence_var() { if (_pd_seq)  delete _pd_seq; }
        
      inline ProfileDescSequence_var& operator = (ProfileDescSequence* _s) {
        if (_pd_seq)  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline ProfileDescSequence_var& operator = (const ProfileDescSequence_var& _s) {
        if (&_s != this) {
          if (_s._pd_seq) {
            if (!_pd_seq)  _pd_seq = new ProfileDescSequence;
            *_pd_seq = *_s._pd_seq;
          }
          else if (_pd_seq) {
            delete _pd_seq;
            _pd_seq = 0;
          }
        }
        return *this;
      }
      inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline ProfileDescSequence* operator -> () { return _pd_seq; }
      inline const ProfileDescSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator ProfileDescSequence& () const { return *_pd_seq; }
#else
      inline operator const ProfileDescSequence& () const { return *_pd_seq; }
      inline operator ProfileDescSequence& () { return *_pd_seq; }
#endif
        
      inline const ProfileDescSequence& in() const { return *_pd_seq; }
      inline ProfileDescSequence&       inout()    { return *_pd_seq; }
      inline ProfileDescSequence*&      out() {
        if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline ProfileDescSequence* _retn() { ProfileDescSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class ProfileDescSequence_out;
      
    private:
      ProfileDescSequence* _pd_seq;
    };

    class ProfileDescSequence_out {
    public:
      inline ProfileDescSequence_out(ProfileDescSequence*& _s) : _data(_s) { _data = 0; }
      inline ProfileDescSequence_out(ProfileDescSequence_var& _s)
        : _data(_s._pd_seq) { _s = (ProfileDescSequence*) 0; }
      inline ProfileDescSequence_out(const ProfileDescSequence_out& _s) : _data(_s._data) {}
      inline ProfileDescSequence_out& operator = (const ProfileDescSequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline ProfileDescSequence_out& operator = (ProfileDescSequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator ProfileDescSequence*&()  { return _data; }
      inline ProfileDescSequence*& ptr()       { return _data; }
      inline ProfileDescSequence* operator->() { return _data; }

      inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      ProfileDescSequence*& _data;

    private:
      ProfileDescSequence_out();
      ProfileDescSequence_out& operator=(const ProfileDescSequence_var&);
    };

  
  };

  class _objref_Sandbox :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    // IDL operations
    CosNaming::NamingContext_ptr namingContext();
    CF::DeviceManager_ptr deviceManager();
    Sandbox::ProfileDescSequence* availableProfiles();
    CF::FileManager_ptr fileManager();
    Sandbox::ResourceDescSequence* registeredResources();
    CF::ResourceFactory_ptr getResourceFactory(const char* identifier);
    CF::ResourceFactory_ptr getResourceFactoryByProfile(const char* profile);
    void refresh(::CORBA::Object_ptr obj, ::ExtendedCF::Sandbox::Depth dpth);

    // Constructors
    inline _objref_Sandbox()  { _PR_setobj(0); }  // nil
    _objref_Sandbox(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_Sandbox();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_Sandbox(const _objref_Sandbox&);
    _objref_Sandbox& operator = (const _objref_Sandbox&);
    // not implemented

    friend class Sandbox;
  };

  class _pof_Sandbox : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_Sandbox() : _OMNI_NS(proxyObjectFactory)(Sandbox::_PD_repoId) {}
    virtual ~_pof_Sandbox();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_Sandbox :
    public virtual omniServant
  {
  public:
    virtual ~_impl_Sandbox();

    virtual CosNaming::NamingContext_ptr namingContext() = 0;
    virtual CF::DeviceManager_ptr deviceManager() = 0;
    virtual Sandbox::ProfileDescSequence* availableProfiles() = 0;
    virtual CF::FileManager_ptr fileManager() = 0;
    virtual Sandbox::ResourceDescSequence* registeredResources() = 0;
    virtual CF::ResourceFactory_ptr getResourceFactory(const char* identifier) = 0;
    virtual CF::ResourceFactory_ptr getResourceFactoryByProfile(const char* profile) = 0;
    virtual void refresh(::CORBA::Object_ptr obj, ::ExtendedCF::Sandbox::Depth dpth) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Sandbox;

_CORBA_MODULE_END



_CORBA_MODULE POA_ExtendedCF
_CORBA_MODULE_BEG

  class Sandbox :
    public virtual ExtendedCF::_impl_Sandbox,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~Sandbox();

    inline ::ExtendedCF::Sandbox_ptr _this() {
      return (::ExtendedCF::Sandbox_ptr) _do_this(::ExtendedCF::Sandbox::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_ExtendedCF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const ExtendedCF::ResourceDesc& _s);
extern void operator<<=(::CORBA::Any& _a, ExtendedCF::ResourceDesc* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::ResourceDesc*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ExtendedCF::ResourceDesc*& _sp);

inline void operator >>=(ExtendedCF::Sandbox::Depth _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (ExtendedCF::Sandbox::Depth& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= ExtendedCF::Sandbox::SELF) {
    _e = (ExtendedCF::Sandbox::Depth) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, ExtendedCF::Sandbox::Depth _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::Sandbox::Depth& _s);

void operator<<=(::CORBA::Any& _a, const ExtendedCF::Sandbox::ResourceDescSequence& _s);
void operator<<=(::CORBA::Any& _a, ExtendedCF::Sandbox::ResourceDescSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::Sandbox::ResourceDescSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ExtendedCF::Sandbox::ResourceDescSequence*& _sp);

void operator<<=(::CORBA::Any& _a, const ExtendedCF::Sandbox::ProfileDescSequence& _s);
void operator<<=(::CORBA::Any& _a, ExtendedCF::Sandbox::ProfileDescSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::Sandbox::ProfileDescSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ExtendedCF::Sandbox::ProfileDescSequence*& _sp);

void operator<<=(::CORBA::Any& _a, ExtendedCF::Sandbox_ptr _s);
void operator<<=(::CORBA::Any& _a, ExtendedCF::Sandbox_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::Sandbox_ptr& _s);



inline void
ExtendedCF::Sandbox::_marshalObjRef(::ExtendedCF::Sandbox_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_sandbox
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_sandbox
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_sandbox
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_sandbox
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_sandbox
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_sandbox
#endif

#endif  // __sandbox_hh__


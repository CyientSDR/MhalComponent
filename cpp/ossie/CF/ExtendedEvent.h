// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __ExtendedEvent_hh__
#define __ExtendedEvent_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
#endif



#ifndef __CosEventComm_hh_EXTERNAL_GUARD__
#define __CosEventComm_hh_EXTERNAL_GUARD__
#include <COS/CosEventComm.hh>
#endif
#ifndef __CosEventChannelAdmin_hh_EXTERNAL_GUARD__
#define __CosEventChannelAdmin_hh_EXTERNAL_GUARD__
#include <COS/CosEventChannelAdmin.hh>
#endif
#ifndef __DataType_hh_EXTERNAL_GUARD__
#define __DataType_hh_EXTERNAL_GUARD__
#include <ossie/CF/DataType.h>
#endif
#ifndef __CosNaming_hh_EXTERNAL_GUARD__
#define __CosNaming_hh_EXTERNAL_GUARD__
#include <COS/CosNaming.hh>
#endif
#ifndef __Port_hh_EXTERNAL_GUARD__
#define __Port_hh_EXTERNAL_GUARD__
#include <ossie/CF/Port.h>
#endif
#ifndef __LogInterfaces_hh_EXTERNAL_GUARD__
#define __LogInterfaces_hh_EXTERNAL_GUARD__
#include <ossie/CF/LogInterfaces.h>
#endif
#ifndef __EventChannelManager_hh_EXTERNAL_GUARD__
#define __EventChannelManager_hh_EXTERNAL_GUARD__
#include <ossie/CF/EventChannelManager.h>
#endif
#ifndef __cf_hh_EXTERNAL_GUARD__
#define __cf_hh_EXTERNAL_GUARD__
#include <ossie/CF/cf.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE ExtendedEvent

_CORBA_MODULE_BEG

  enum ResourceStateChangeType { STOPPED, STARTED /*, __max_ResourceStateChangeType=0xffffffff */ };
  typedef ResourceStateChangeType& ResourceStateChangeType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ResourceStateChangeType;

  struct ResourceStateChangeEventType {
    typedef _CORBA_ConstrType_Variable_Var<ResourceStateChangeEventType> _var_type;

    
    ::CORBA::String_member sourceId;

    ::CORBA::String_member sourceName;

    ResourceStateChangeType stateChangeFrom;

    ResourceStateChangeType stateChangeTo;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef ResourceStateChangeEventType::_var_type ResourceStateChangeEventType_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< ResourceStateChangeEventType,ResourceStateChangeEventType_var > ResourceStateChangeEventType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ResourceStateChangeEventType;

  struct PropertySetChangeEventType {
    typedef _CORBA_ConstrType_Variable_Var<PropertySetChangeEventType> _var_type;

    
    ::CORBA::String_member sourceId;

    ::CORBA::String_member sourceName;

    CF::Properties properties;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef PropertySetChangeEventType::_var_type PropertySetChangeEventType_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< PropertySetChangeEventType,PropertySetChangeEventType_var > PropertySetChangeEventType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PropertySetChangeEventType;

#ifndef __ExtendedEvent_mMessageEvent__
#define __ExtendedEvent_mMessageEvent__
  class MessageEvent;
  class _objref_MessageEvent;
  class _impl_MessageEvent;
  
  typedef _objref_MessageEvent* MessageEvent_ptr;
  typedef MessageEvent_ptr MessageEventRef;

  class MessageEvent_Helper {
  public:
    typedef MessageEvent_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_MessageEvent, MessageEvent_Helper> MessageEvent_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_MessageEvent,MessageEvent_Helper > MessageEvent_out;

#endif

  // interface MessageEvent
  class MessageEvent {
  public:
    // Declarations for this interface type.
    typedef MessageEvent_ptr _ptr_type;
    typedef MessageEvent_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_MessageEvent :
    public virtual CosEventChannelAdmin::_objref_EventChannel,
    public virtual CF::_objref_Port
  {
  public:
    // IDL operations
    

    // Constructors
    inline _objref_MessageEvent()  { _PR_setobj(0); }  // nil
    _objref_MessageEvent(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_MessageEvent();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_MessageEvent(const _objref_MessageEvent&);
    _objref_MessageEvent& operator = (const _objref_MessageEvent&);
    // not implemented

    friend class MessageEvent;
  };

  class _pof_MessageEvent : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_MessageEvent() : _OMNI_NS(proxyObjectFactory)(MessageEvent::_PD_repoId) {}
    virtual ~_pof_MessageEvent();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_MessageEvent :
    public virtual CosEventChannelAdmin::_impl_EventChannel,
    public virtual CF::_impl_Port
  {
  public:
    virtual ~_impl_MessageEvent();

    
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_MessageEvent;

_CORBA_MODULE_END



_CORBA_MODULE POA_ExtendedEvent
_CORBA_MODULE_BEG

  class MessageEvent :
    public virtual ExtendedEvent::_impl_MessageEvent,
    public virtual POA_CosEventChannelAdmin::EventChannel,
      public virtual POA_CF::Port
  {
  public:
    virtual ~MessageEvent();

    inline ::ExtendedEvent::MessageEvent_ptr _this() {
      return (::ExtendedEvent::MessageEvent_ptr) _do_this(::ExtendedEvent::MessageEvent::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_ExtendedEvent
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(ExtendedEvent::ResourceStateChangeType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (ExtendedEvent::ResourceStateChangeType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= ExtendedEvent::STARTED) {
    _e = (ExtendedEvent::ResourceStateChangeType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, ExtendedEvent::ResourceStateChangeType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedEvent::ResourceStateChangeType& _s);

extern void operator<<=(::CORBA::Any& _a, const ExtendedEvent::ResourceStateChangeEventType& _s);
extern void operator<<=(::CORBA::Any& _a, ExtendedEvent::ResourceStateChangeEventType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedEvent::ResourceStateChangeEventType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ExtendedEvent::ResourceStateChangeEventType*& _sp);

extern void operator<<=(::CORBA::Any& _a, const ExtendedEvent::PropertySetChangeEventType& _s);
extern void operator<<=(::CORBA::Any& _a, ExtendedEvent::PropertySetChangeEventType* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedEvent::PropertySetChangeEventType*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ExtendedEvent::PropertySetChangeEventType*& _sp);

void operator<<=(::CORBA::Any& _a, ExtendedEvent::MessageEvent_ptr _s);
void operator<<=(::CORBA::Any& _a, ExtendedEvent::MessageEvent_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedEvent::MessageEvent_ptr& _s);



inline void
ExtendedEvent::MessageEvent::_marshalObjRef(::ExtendedEvent::MessageEvent_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ExtendedEvent
#endif

#endif  // __ExtendedEvent_hh__


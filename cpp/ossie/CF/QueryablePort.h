// This file is generated by omniidl (C++ backend)- omniORB_4_2. Do not edit.
#ifndef __QueryablePort_hh__
#define __QueryablePort_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_QueryablePort
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_QueryablePort
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_QueryablePort
#endif



#ifndef __DataType_hh_EXTERNAL_GUARD__
#define __DataType_hh_EXTERNAL_GUARD__
#include <ossie/CF/DataType.h>
#endif
#ifndef __Port_hh_EXTERNAL_GUARD__
#define __Port_hh_EXTERNAL_GUARD__
#include <ossie/CF/Port.h>
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif



_CORBA_MODULE ExtendedCF

_CORBA_MODULE_BEG

  struct UsesConnection {
    typedef _CORBA_ConstrType_Variable_Var<UsesConnection> _var_type;

    
    ::CORBA::String_member connectionId;

    ::CORBA::Object_Member port;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef UsesConnection::_var_type UsesConnection_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< UsesConnection,UsesConnection_var > UsesConnection_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UsesConnection;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UsesConnectionSequence;

  class UsesConnectionSequence_var;

  class UsesConnectionSequence : public _CORBA_Unbounded_Sequence< UsesConnection >  {
  public:
    typedef UsesConnectionSequence_var _var_type;
    inline UsesConnectionSequence() {}
    inline UsesConnectionSequence(const UsesConnectionSequence& _s)
      : _CORBA_Unbounded_Sequence< UsesConnection > (_s) {}

    inline UsesConnectionSequence(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence< UsesConnection > (_max) {}
    inline UsesConnectionSequence(_CORBA_ULong _max, _CORBA_ULong _len, UsesConnection* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence< UsesConnection > (_max, _len, _val, _rel) {}

  

    inline UsesConnectionSequence& operator = (const UsesConnectionSequence& _s) {
      _CORBA_Unbounded_Sequence< UsesConnection > ::operator=(_s);
      return *this;
    }
  };

  class UsesConnectionSequence_out;

  class UsesConnectionSequence_var {
  public:
    inline UsesConnectionSequence_var() : _pd_seq(0) {}
    inline UsesConnectionSequence_var(UsesConnectionSequence* _s) : _pd_seq(_s) {}
    inline UsesConnectionSequence_var(const UsesConnectionSequence_var& _s) {
      if (_s._pd_seq)  _pd_seq = new UsesConnectionSequence(*_s._pd_seq);
      else             _pd_seq = 0;
    }
    inline ~UsesConnectionSequence_var() { if (_pd_seq)  delete _pd_seq; }
      
    inline UsesConnectionSequence_var& operator = (UsesConnectionSequence* _s) {
      if (_pd_seq)  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline UsesConnectionSequence_var& operator = (const UsesConnectionSequence_var& _s) {
      if (&_s != this) {
        if (_s._pd_seq) {
          if (!_pd_seq)  _pd_seq = new UsesConnectionSequence;
          *_pd_seq = *_s._pd_seq;
        }
        else if (_pd_seq) {
          delete _pd_seq;
          _pd_seq = 0;
        }
      }
      return *this;
    }
    inline UsesConnection& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline UsesConnectionSequence* operator -> () { return _pd_seq; }
    inline const UsesConnectionSequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator UsesConnectionSequence& () const { return *_pd_seq; }
#else
    inline operator const UsesConnectionSequence& () const { return *_pd_seq; }
    inline operator UsesConnectionSequence& () { return *_pd_seq; }
#endif
      
    inline const UsesConnectionSequence& in() const { return *_pd_seq; }
    inline UsesConnectionSequence&       inout()    { return *_pd_seq; }
    inline UsesConnectionSequence*&      out() {
      if (_pd_seq) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline UsesConnectionSequence* _retn() { UsesConnectionSequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class UsesConnectionSequence_out;
    
  private:
    UsesConnectionSequence* _pd_seq;
  };

  class UsesConnectionSequence_out {
  public:
    inline UsesConnectionSequence_out(UsesConnectionSequence*& _s) : _data(_s) { _data = 0; }
    inline UsesConnectionSequence_out(UsesConnectionSequence_var& _s)
      : _data(_s._pd_seq) { _s = (UsesConnectionSequence*) 0; }
    inline UsesConnectionSequence_out(const UsesConnectionSequence_out& _s) : _data(_s._data) {}
    inline UsesConnectionSequence_out& operator = (const UsesConnectionSequence_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline UsesConnectionSequence_out& operator = (UsesConnectionSequence* _s) {
      _data = _s;
      return *this;
    }
    inline operator UsesConnectionSequence*&()  { return _data; }
    inline UsesConnectionSequence*& ptr()       { return _data; }
    inline UsesConnectionSequence* operator->() { return _data; }

    inline UsesConnection& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    UsesConnectionSequence*& _data;

  private:
    UsesConnectionSequence_out();
    UsesConnectionSequence_out& operator=(const UsesConnectionSequence_var&);
  };

#ifndef __ExtendedCF_mQueryablePort__
#define __ExtendedCF_mQueryablePort__
  class QueryablePort;
  class _objref_QueryablePort;
  class _impl_QueryablePort;
  
  typedef _objref_QueryablePort* QueryablePort_ptr;
  typedef QueryablePort_ptr QueryablePortRef;

  class QueryablePort_Helper {
  public:
    typedef QueryablePort_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_QueryablePort, QueryablePort_Helper> QueryablePort_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_QueryablePort,QueryablePort_Helper > QueryablePort_out;

#endif

  // interface QueryablePort
  class QueryablePort {
  public:
    // Declarations for this interface type.
    typedef QueryablePort_ptr _ptr_type;
    typedef QueryablePort_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static inline _ptr_type _fromObjRef(omniObjRef* o) {
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_QueryablePort :
    public virtual CF::_objref_Port
  {
  public:
    // IDL operations
    UsesConnectionSequence* connections();

    // Constructors
    inline _objref_QueryablePort()  { _PR_setobj(0); }  // nil
    _objref_QueryablePort(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_QueryablePort();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_QueryablePort(const _objref_QueryablePort&);
    _objref_QueryablePort& operator = (const _objref_QueryablePort&);
    // not implemented

    friend class QueryablePort;
  };

  class _pof_QueryablePort : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_QueryablePort() : _OMNI_NS(proxyObjectFactory)(QueryablePort::_PD_repoId) {}
    virtual ~_pof_QueryablePort();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_QueryablePort :
    public virtual CF::_impl_Port
  {
  public:
    virtual ~_impl_QueryablePort();

    virtual UsesConnectionSequence* connections() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_QueryablePort;

_CORBA_MODULE_END



_CORBA_MODULE POA_ExtendedCF
_CORBA_MODULE_BEG

  class QueryablePort :
    public virtual ExtendedCF::_impl_QueryablePort,
    public virtual POA_CF::Port
  {
  public:
    virtual ~QueryablePort();

    inline ::ExtendedCF::QueryablePort_ptr _this() {
      return (::ExtendedCF::QueryablePort_ptr) _do_this(::ExtendedCF::QueryablePort::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_ExtendedCF
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const ExtendedCF::UsesConnection& _s);
extern void operator<<=(::CORBA::Any& _a, ExtendedCF::UsesConnection* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::UsesConnection*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ExtendedCF::UsesConnection*& _sp);

void operator<<=(::CORBA::Any& _a, const ExtendedCF::UsesConnectionSequence& _s);
void operator<<=(::CORBA::Any& _a, ExtendedCF::UsesConnectionSequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::UsesConnectionSequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const ExtendedCF::UsesConnectionSequence*& _sp);

void operator<<=(::CORBA::Any& _a, ExtendedCF::QueryablePort_ptr _s);
void operator<<=(::CORBA::Any& _a, ExtendedCF::QueryablePort_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, ExtendedCF::QueryablePort_ptr& _s);



inline void
ExtendedCF::QueryablePort::_marshalObjRef(::ExtendedCF::QueryablePort_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}



#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_QueryablePort
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_QueryablePort
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_QueryablePort
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_QueryablePort
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_QueryablePort
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_QueryablePort
#endif

#endif  // __QueryablePort_hh__

